import {
  __commonJS
} from "./chunk-WOOG5QLI.js";

// node_modules/is-plain-obj/index.js
var require_is_plain_obj = __commonJS({
  "node_modules/is-plain-obj/index.js"(exports, module) {
    "use strict";
    module.exports = (value) => {
      if (Object.prototype.toString.call(value) !== "[object Object]") {
        return false;
      }
      const prototype = Object.getPrototypeOf(value);
      return prototype === null || prototype === Object.prototype;
    };
  }
});

// node_modules/@contentful/rich-text-types/dist/index.js
var require_dist = __commonJS({
  "node_modules/@contentful/rich-text-types/dist/index.js"(exports) {
    var isPlainObject = require_is_plain_obj();
    exports.BLOCKS = void 0;
    (function(BLOCKS) {
      BLOCKS["DOCUMENT"] = "document";
      BLOCKS["PARAGRAPH"] = "paragraph";
      BLOCKS["HEADING_1"] = "heading-1";
      BLOCKS["HEADING_2"] = "heading-2";
      BLOCKS["HEADING_3"] = "heading-3";
      BLOCKS["HEADING_4"] = "heading-4";
      BLOCKS["HEADING_5"] = "heading-5";
      BLOCKS["HEADING_6"] = "heading-6";
      BLOCKS["OL_LIST"] = "ordered-list";
      BLOCKS["UL_LIST"] = "unordered-list";
      BLOCKS["LIST_ITEM"] = "list-item";
      BLOCKS["HR"] = "hr";
      BLOCKS["QUOTE"] = "blockquote";
      BLOCKS["EMBEDDED_ENTRY"] = "embedded-entry-block";
      BLOCKS["EMBEDDED_ASSET"] = "embedded-asset-block";
      BLOCKS["EMBEDDED_RESOURCE"] = "embedded-resource-block";
      BLOCKS["TABLE"] = "table";
      BLOCKS["TABLE_ROW"] = "table-row";
      BLOCKS["TABLE_CELL"] = "table-cell";
      BLOCKS["TABLE_HEADER_CELL"] = "table-header-cell";
    })(exports.BLOCKS || (exports.BLOCKS = {}));
    exports.INLINES = void 0;
    (function(INLINES) {
      INLINES["ASSET_HYPERLINK"] = "asset-hyperlink";
      INLINES["EMBEDDED_ENTRY"] = "embedded-entry-inline";
      INLINES["EMBEDDED_RESOURCE"] = "embedded-resource-inline";
      INLINES["ENTRY_HYPERLINK"] = "entry-hyperlink";
      INLINES["HYPERLINK"] = "hyperlink";
      INLINES["RESOURCE_HYPERLINK"] = "resource-hyperlink";
    })(exports.INLINES || (exports.INLINES = {}));
    exports.MARKS = void 0;
    (function(MARKS) {
      MARKS["BOLD"] = "bold";
      MARKS["ITALIC"] = "italic";
      MARKS["UNDERLINE"] = "underline";
      MARKS["CODE"] = "code";
      MARKS["SUPERSCRIPT"] = "superscript";
      MARKS["SUBSCRIPT"] = "subscript";
      MARKS["STRIKETHROUGH"] = "strikethrough";
    })(exports.MARKS || (exports.MARKS = {}));
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    }
    var _a$1;
    var TOP_LEVEL_BLOCKS = [
      exports.BLOCKS.PARAGRAPH,
      exports.BLOCKS.HEADING_1,
      exports.BLOCKS.HEADING_2,
      exports.BLOCKS.HEADING_3,
      exports.BLOCKS.HEADING_4,
      exports.BLOCKS.HEADING_5,
      exports.BLOCKS.HEADING_6,
      exports.BLOCKS.OL_LIST,
      exports.BLOCKS.UL_LIST,
      exports.BLOCKS.HR,
      exports.BLOCKS.QUOTE,
      exports.BLOCKS.EMBEDDED_ENTRY,
      exports.BLOCKS.EMBEDDED_ASSET,
      exports.BLOCKS.EMBEDDED_RESOURCE,
      exports.BLOCKS.TABLE
    ];
    var LIST_ITEM_BLOCKS = [
      exports.BLOCKS.PARAGRAPH,
      exports.BLOCKS.HEADING_1,
      exports.BLOCKS.HEADING_2,
      exports.BLOCKS.HEADING_3,
      exports.BLOCKS.HEADING_4,
      exports.BLOCKS.HEADING_5,
      exports.BLOCKS.HEADING_6,
      exports.BLOCKS.OL_LIST,
      exports.BLOCKS.UL_LIST,
      exports.BLOCKS.HR,
      exports.BLOCKS.QUOTE,
      exports.BLOCKS.EMBEDDED_ENTRY,
      exports.BLOCKS.EMBEDDED_ASSET,
      exports.BLOCKS.EMBEDDED_RESOURCE
    ];
    var TABLE_BLOCKS = [
      exports.BLOCKS.TABLE,
      exports.BLOCKS.TABLE_ROW,
      exports.BLOCKS.TABLE_CELL,
      exports.BLOCKS.TABLE_HEADER_CELL
    ];
    var VOID_BLOCKS = [
      exports.BLOCKS.HR,
      exports.BLOCKS.EMBEDDED_ENTRY,
      exports.BLOCKS.EMBEDDED_ASSET,
      exports.BLOCKS.EMBEDDED_RESOURCE
    ];
    var CONTAINERS = (_a$1 = {}, _a$1[exports.BLOCKS.OL_LIST] = [exports.BLOCKS.LIST_ITEM], _a$1[exports.BLOCKS.UL_LIST] = [exports.BLOCKS.LIST_ITEM], _a$1[exports.BLOCKS.LIST_ITEM] = LIST_ITEM_BLOCKS, _a$1[exports.BLOCKS.QUOTE] = [exports.BLOCKS.PARAGRAPH], _a$1[exports.BLOCKS.TABLE] = [exports.BLOCKS.TABLE_ROW], _a$1[exports.BLOCKS.TABLE_ROW] = [exports.BLOCKS.TABLE_CELL, exports.BLOCKS.TABLE_HEADER_CELL], _a$1[exports.BLOCKS.TABLE_CELL] = [exports.BLOCKS.PARAGRAPH, exports.BLOCKS.UL_LIST, exports.BLOCKS.OL_LIST], _a$1[exports.BLOCKS.TABLE_HEADER_CELL] = [exports.BLOCKS.PARAGRAPH], _a$1);
    var HEADINGS = [
      exports.BLOCKS.HEADING_1,
      exports.BLOCKS.HEADING_2,
      exports.BLOCKS.HEADING_3,
      exports.BLOCKS.HEADING_4,
      exports.BLOCKS.HEADING_5,
      exports.BLOCKS.HEADING_6
    ];
    var TEXT_CONTAINERS = __spreadArray([exports.BLOCKS.PARAGRAPH], HEADINGS, true);
    var V1_NODE_TYPES = [
      exports.BLOCKS.DOCUMENT,
      exports.BLOCKS.PARAGRAPH,
      exports.BLOCKS.HEADING_1,
      exports.BLOCKS.HEADING_2,
      exports.BLOCKS.HEADING_3,
      exports.BLOCKS.HEADING_4,
      exports.BLOCKS.HEADING_5,
      exports.BLOCKS.HEADING_6,
      exports.BLOCKS.OL_LIST,
      exports.BLOCKS.UL_LIST,
      exports.BLOCKS.LIST_ITEM,
      exports.BLOCKS.HR,
      exports.BLOCKS.QUOTE,
      exports.BLOCKS.EMBEDDED_ENTRY,
      exports.BLOCKS.EMBEDDED_ASSET,
      exports.INLINES.HYPERLINK,
      exports.INLINES.ENTRY_HYPERLINK,
      exports.INLINES.ASSET_HYPERLINK,
      exports.INLINES.EMBEDDED_ENTRY,
      "text"
    ];
    var V1_MARKS = [exports.MARKS.BOLD, exports.MARKS.CODE, exports.MARKS.ITALIC, exports.MARKS.UNDERLINE];
    var EMPTY_DOCUMENT = {
      nodeType: exports.BLOCKS.DOCUMENT,
      data: {},
      content: [
        {
          nodeType: exports.BLOCKS.PARAGRAPH,
          data: {},
          content: [
            {
              nodeType: "text",
              value: "",
              marks: [],
              data: {}
            }
          ]
        }
      ]
    };
    function hasValue(obj, value) {
      for (var _i = 0, _a2 = Object.keys(obj); _i < _a2.length; _i++) {
        var key = _a2[_i];
        if (value === obj[key]) {
          return true;
        }
      }
      return false;
    }
    function isInline(node) {
      return hasValue(exports.INLINES, node.nodeType);
    }
    function isBlock(node) {
      return hasValue(exports.BLOCKS, node.nodeType);
    }
    function isText(node) {
      return node.nodeType === "text";
    }
    var helpers = Object.freeze({
      __proto__: null,
      isBlock,
      isInline,
      isText
    });
    var typeMismatchError = function(_a2) {
      var path = _a2.path, property = _a2.property, typeName = _a2.typeName, value = _a2.value;
      return {
        details: 'The type of "'.concat(property, '" is incorrect, expected type: ').concat(typeName),
        name: "type",
        path: path.toArray(),
        type: typeName,
        value
      };
    };
    var minSizeError = function(_a2) {
      var min = _a2.min, value = _a2.value, path = _a2.path;
      return {
        name: "size",
        min,
        path: path.toArray(),
        details: "Size must be at least ".concat(min),
        value
      };
    };
    var maxSizeError = function(_a2) {
      var max = _a2.max, value = _a2.value, path = _a2.path;
      return {
        name: "size",
        max,
        path: path.toArray(),
        details: "Size must be at most ".concat(max),
        value
      };
    };
    var enumError = function(_a2) {
      var expected = _a2.expected, value = _a2.value, path = _a2.path;
      return {
        details: "Value must be one of expected values",
        name: "in",
        expected: __spreadArray([], expected, true).sort(),
        path: path.toArray(),
        value
      };
    };
    var unknownPropertyError = function(_a2) {
      var property = _a2.property, path = _a2.path;
      return {
        details: 'The property "'.concat(property, '" is not expected'),
        name: "unexpected",
        path: path.toArray()
      };
    };
    var requiredPropertyError = function(_a2) {
      var property = _a2.property, path = _a2.path;
      return {
        details: 'The property "'.concat(property, '" is required here'),
        name: "required",
        path: path.toArray()
      };
    };
    var ObjectAssertion = (
      /** @class */
      function() {
        function ObjectAssertion2(obj, path) {
          var _this = this;
          this.obj = obj;
          this.path = path;
          this._errors = [];
          this.catch = function() {
            var _a2;
            var errors = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              errors[_i] = arguments[_i];
            }
            (_a2 = _this._errors).push.apply(_a2, errors);
          };
          this.exists = function(key) {
            if (key in _this.obj) {
              return true;
            }
            _this.catch(requiredPropertyError({
              property: key,
              path: _this.path.of(key)
            }));
            return false;
          };
          this.object = function(key) {
            var _a2;
            var value = key ? _this.obj[key] : _this.obj;
            if (key) {
              if (!_this.exists(key)) {
                return false;
              }
            }
            if (isPlainObject(value)) {
              return true;
            }
            var path2 = key ? _this.path.of(key) : _this.path;
            var property = (_a2 = key !== null && key !== void 0 ? key : _this.path.last()) !== null && _a2 !== void 0 ? _a2 : "value";
            _this.catch(typeMismatchError({
              typeName: "Object",
              property,
              path: path2,
              value
            }));
            return false;
          };
          this.string = function(key) {
            var value = _this.obj[key];
            if (key && !_this.exists(key)) {
              return false;
            }
            if (typeof value === "string") {
              return true;
            }
            _this.catch(typeMismatchError({
              typeName: "String",
              property: key,
              path: _this.path.of(key),
              value
            }));
            return false;
          };
          this.number = function(key, optional) {
            var value = _this.obj[key];
            if (optional && !(key in _this.obj)) {
              return true;
            }
            if (!_this.exists(key)) {
              return false;
            }
            if (typeof value === "number" && !Number.isNaN(value)) {
              return true;
            }
            _this.catch(typeMismatchError({
              typeName: "Number",
              property: key,
              path: _this.path.of(key),
              value
            }));
            return false;
          };
          this.array = function(key) {
            var value = _this.obj[key];
            if (key && !_this.exists(key)) {
              return false;
            }
            if (Array.isArray(value)) {
              return true;
            }
            _this.catch(typeMismatchError({
              typeName: "Array",
              property: key,
              path: _this.path.of(key),
              value
            }));
            return false;
          };
          this.enum = function(key, expected) {
            var value = _this.obj[key];
            if (typeof value === "string" && expected.includes(value)) {
              return true;
            }
            _this.catch(enumError({
              expected,
              value,
              path: _this.path.of(key)
            }));
            return false;
          };
          this.empty = function(key) {
            if (!_this.array(key)) {
              return false;
            }
            var value = _this.obj[key];
            if (value.length === 0) {
              return true;
            }
            _this.catch(maxSizeError({
              max: 0,
              value,
              path: _this.path.of(key)
            }));
            return false;
          };
          this.minLength = function(key, min) {
            if (!_this.array(key)) {
              return false;
            }
            var value = _this.obj[key];
            if (value.length >= min) {
              return true;
            }
            _this.catch(minSizeError({
              min,
              value,
              path: _this.path.of(key)
            }));
            return false;
          };
          this.noAdditionalProperties = function(properties) {
            var unknowns = Object.keys(_this.obj).sort().filter(function(key) {
              return !properties.includes(key);
            });
            unknowns.forEach(function(property) {
              return _this.catch(unknownPropertyError({
                property,
                path: _this.path.of(property)
              }));
            });
            return unknowns.length === 0;
          };
          this.each = function(key, assert2) {
            if (!_this.array(key)) {
              return;
            }
            var value = _this.obj[key];
            var foundErrors = false;
            value.forEach(function(item, index) {
              if (foundErrors) {
                return;
              }
              var errors = assert2(item, _this.path.of(key).of(index));
              if (errors.length > 0) {
                foundErrors = true;
              }
              _this.catch.apply(_this, errors);
            });
          };
        }
        Object.defineProperty(ObjectAssertion2.prototype, "errors", {
          get: function() {
            var _this = this;
            var serializeError = function(error) {
              return JSON.stringify({
                details: error.details,
                path: error.path
              });
            };
            return this._errors.filter(function(error, index) {
              return _this._errors.findIndex(function(step) {
                return serializeError(error) === serializeError(step);
              }) === index;
            });
          },
          enumerable: false,
          configurable: true
        });
        return ObjectAssertion2;
      }()
    );
    var VOID_CONTENT = [];
    var NodeAssertion = (
      /** @class */
      function() {
        function NodeAssertion2(contentRule, validateData) {
          this.contentRule = contentRule;
          this.validateData = validateData;
        }
        NodeAssertion2.prototype.assert = function(node, path) {
          var _a2, _b;
          var $ = new ObjectAssertion(node, path);
          if (!$.object()) {
            return $.errors;
          }
          $.noAdditionalProperties(["nodeType", "data", "content"]);
          var _c = Array.isArray(this.contentRule) ? {
            nodeTypes: this.contentRule
          } : this.contentRule(node, path), nodeTypes = _c.nodeTypes, _d = _c.min, min = _d === void 0 ? 0 : _d;
          if (nodeTypes.length === 0 && min > 0) {
            throw new Error("Invalid content rule. Cannot have enforce a 'min' of ".concat(min, " with no nodeTypes"));
          }
          $.minLength("content", min);
          if (nodeTypes.length === 0) {
            $.empty("content");
          } else {
            $.each("content", function(item, path2) {
              var item$ = new ObjectAssertion(item, path2);
              if (!item$.object()) {
                return item$.errors;
              }
              item$.enum("nodeType", nodeTypes);
              return item$.errors;
            });
          }
          if ($.object("data")) {
            var dataErrors = (_b = (_a2 = this.validateData) === null || _a2 === void 0 ? void 0 : _a2.call(this, node.data, path.of("data"))) !== null && _b !== void 0 ? _b : [];
            $.catch.apply($, dataErrors);
          }
          return $.errors;
        };
        return NodeAssertion2;
      }()
    );
    var EntityLinkAssertion = (
      /** @class */
      function(_super) {
        __extends(EntityLinkAssertion2, _super);
        function EntityLinkAssertion2(linkType, contentNodeTypes) {
          var _this = _super.call(this, contentNodeTypes, function(data, path) {
            return _this.assertLink(data, path);
          }) || this;
          _this.linkType = linkType;
          _this.assertLink = function(data, path) {
            var $ = new ObjectAssertion(data, path);
            if ($.object("target")) {
              var sys$ = new ObjectAssertion(data.target.sys, path.of("target").of("sys"));
              if (sys$.object()) {
                sys$.enum("type", [_this.type]);
                sys$.enum("linkType", [_this.linkType]);
                if (_this.type === "Link") {
                  sys$.string("id");
                  sys$.noAdditionalProperties(["type", "linkType", "id"]);
                } else if (_this.type === "ResourceLink") {
                  sys$.string("urn");
                  sys$.noAdditionalProperties(["type", "linkType", "urn"]);
                }
              }
              $.catch.apply($, sys$.errors);
            }
            $.noAdditionalProperties(["target"]);
            return $.errors;
          };
          _this.type = _this.linkType.startsWith("Contentful:") ? "ResourceLink" : "Link";
          return _this;
        }
        return EntityLinkAssertion2;
      }(NodeAssertion)
    );
    var HyperLinkAssertion = (
      /** @class */
      function(_super) {
        __extends(HyperLinkAssertion2, _super);
        function HyperLinkAssertion2() {
          var _this = _super.call(this, ["text"], function(data, path) {
            return _this.assertLink(data, path);
          }) || this;
          _this.assertLink = function(data, path) {
            var $ = new ObjectAssertion(data, path);
            $.string("uri");
            $.noAdditionalProperties(["uri"]);
            return $.errors;
          };
          return _this;
        }
        return HyperLinkAssertion2;
      }(NodeAssertion)
    );
    var assert = function(contentRule, validateData) {
      return new NodeAssertion(contentRule, validateData);
    };
    var assertLink = function(linkType, contentRule) {
      return new EntityLinkAssertion(linkType, contentRule);
    };
    var Path = (
      /** @class */
      /* @__PURE__ */ function() {
        function Path2(path) {
          if (path === void 0) {
            path = [];
          }
          var _this = this;
          this.path = path;
          this.of = function(element) {
            return new Path2(__spreadArray(__spreadArray([], _this.path, true), [element], false));
          };
          this.isRoot = function() {
            return _this.path.length === 0;
          };
          this.last = function() {
            return _this.path[_this.path.length - 1];
          };
          this.toArray = function() {
            return _this.path;
          };
        }
        return Path2;
      }()
    );
    function assertText(text, path) {
      var $ = new ObjectAssertion(text, path);
      if (!$.object()) {
        return $.errors;
      }
      $.noAdditionalProperties(["nodeType", "data", "value", "marks"]);
      $.object("data");
      $.each("marks", function(mark, path2) {
        var mark$ = new ObjectAssertion(mark, path2);
        if (!mark$.object()) {
          return mark$.errors;
        }
        mark$.string("type");
        return mark$.errors;
      });
      $.string("value");
      return $.errors;
    }
    var _a;
    var assertInlineOrText = assert(__spreadArray(__spreadArray([], Object.values(exports.INLINES), true), ["text"], false).sort());
    var assertList = assert([exports.BLOCKS.LIST_ITEM]);
    var assertVoidEntryLink = assertLink("Entry", VOID_CONTENT);
    var assertTableCell = assert(function() {
      return {
        nodeTypes: [exports.BLOCKS.PARAGRAPH],
        min: 1
      };
    }, function(data, path) {
      var $ = new ObjectAssertion(data, path);
      $.noAdditionalProperties(["colspan", "rowspan"]);
      $.number("colspan", true);
      $.number("rowspan", true);
      return $.errors;
    });
    var nodeValidator = (_a = {}, _a[exports.BLOCKS.DOCUMENT] = assert(TOP_LEVEL_BLOCKS), _a[exports.BLOCKS.PARAGRAPH] = assertInlineOrText, _a[exports.BLOCKS.HEADING_1] = assertInlineOrText, _a[exports.BLOCKS.HEADING_2] = assertInlineOrText, _a[exports.BLOCKS.HEADING_3] = assertInlineOrText, _a[exports.BLOCKS.HEADING_4] = assertInlineOrText, _a[exports.BLOCKS.HEADING_5] = assertInlineOrText, _a[exports.BLOCKS.HEADING_6] = assertInlineOrText, _a[exports.BLOCKS.QUOTE] = assert(CONTAINERS[exports.BLOCKS.QUOTE]), _a[exports.BLOCKS.EMBEDDED_ENTRY] = assertVoidEntryLink, _a[exports.BLOCKS.EMBEDDED_ASSET] = assertLink("Asset", VOID_CONTENT), _a[exports.BLOCKS.EMBEDDED_RESOURCE] = assertLink("Contentful:Entry", VOID_CONTENT), _a[exports.BLOCKS.HR] = assert(VOID_CONTENT), _a[exports.BLOCKS.OL_LIST] = assertList, _a[exports.BLOCKS.UL_LIST] = assertList, _a[exports.BLOCKS.LIST_ITEM] = assert(__spreadArray([], LIST_ITEM_BLOCKS, true).sort()), _a[exports.BLOCKS.TABLE] = assert(function() {
      return {
        nodeTypes: [exports.BLOCKS.TABLE_ROW],
        min: 1
      };
    }), _a[exports.BLOCKS.TABLE_ROW] = assert(function() {
      return {
        nodeTypes: [exports.BLOCKS.TABLE_CELL, exports.BLOCKS.TABLE_HEADER_CELL],
        min: 1
      };
    }), _a[exports.BLOCKS.TABLE_CELL] = assertTableCell, _a[exports.BLOCKS.TABLE_HEADER_CELL] = assertTableCell, _a[exports.INLINES.HYPERLINK] = new HyperLinkAssertion(), _a[exports.INLINES.EMBEDDED_ENTRY] = assertVoidEntryLink, _a[exports.INLINES.EMBEDDED_RESOURCE] = assertLink("Contentful:Entry", VOID_CONTENT), _a[exports.INLINES.ENTRY_HYPERLINK] = assertLink("Entry", ["text"]), _a[exports.INLINES.ASSET_HYPERLINK] = assertLink("Asset", ["text"]), _a[exports.INLINES.RESOURCE_HYPERLINK] = assertLink("Contentful:Entry", ["text"]), _a);
    function validateNode(node, path) {
      if (node.nodeType === "text") {
        return assertText(node, path);
      }
      var errors = nodeValidator[node.nodeType].assert(node, path);
      if (errors.length > 0) {
        return errors;
      }
      var $ = new ObjectAssertion(node, path);
      $.each("content", function(item, path2) {
        return validateNode(item, path2);
      });
      return $.errors;
    }
    var validateRichTextDocument = function(document) {
      var path = new Path();
      var $ = new ObjectAssertion(document, path);
      if ($.object()) {
        $.enum("nodeType", [exports.BLOCKS.DOCUMENT]);
      }
      if ($.errors.length > 0) {
        return $.errors;
      }
      return validateNode(document, path);
    };
    exports.CONTAINERS = CONTAINERS;
    exports.EMPTY_DOCUMENT = EMPTY_DOCUMENT;
    exports.HEADINGS = HEADINGS;
    exports.LIST_ITEM_BLOCKS = LIST_ITEM_BLOCKS;
    exports.TABLE_BLOCKS = TABLE_BLOCKS;
    exports.TEXT_CONTAINERS = TEXT_CONTAINERS;
    exports.TOP_LEVEL_BLOCKS = TOP_LEVEL_BLOCKS;
    exports.V1_MARKS = V1_MARKS;
    exports.V1_NODE_TYPES = V1_NODE_TYPES;
    exports.VOID_BLOCKS = VOID_BLOCKS;
    exports.helpers = helpers;
    exports.validateRichTextDocument = validateRichTextDocument;
  }
});

export {
  require_dist
};
//# sourceMappingURL=chunk-EK2ZZ67A.js.map
