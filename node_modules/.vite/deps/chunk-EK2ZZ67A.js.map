{
  "version": 3,
  "sources": ["../../is-plain-obj/index.js", "../../@contentful/rich-text-types/src/blocks.ts", "../../@contentful/rich-text-types/src/inlines.ts", "../../@contentful/rich-text-types/src/marks.ts", "../../@contentful/rich-text-types/src/schemaConstraints.ts", "../../@contentful/rich-text-types/src/emptyDocument.ts", "../../@contentful/rich-text-types/src/helpers.ts", "../../@contentful/rich-text-types/src/validator/errors.ts", "../../@contentful/rich-text-types/src/validator/assert.ts", "../../@contentful/rich-text-types/src/validator/node.ts", "../../@contentful/rich-text-types/src/validator/path.ts", "../../@contentful/rich-text-types/src/validator/text.ts", "../../@contentful/rich-text-types/src/validator/index.ts"],
  "sourcesContent": ["'use strict';\n\nmodule.exports = value => {\n\tif (Object.prototype.toString.call(value) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn prototype === null || prototype === Object.prototype;\n};\n", "/**\n * Map of all Contentful block types. Blocks contain inline or block nodes.\n */\nexport enum BLOCKS {\n  DOCUMENT = 'document',\n  PARAGRAPH = 'paragraph',\n\n  HEADING_1 = 'heading-1',\n  HEADING_2 = 'heading-2',\n  HEADING_3 = 'heading-3',\n  HEADING_4 = 'heading-4',\n  HEADING_5 = 'heading-5',\n  HEADING_6 = 'heading-6',\n\n  OL_LIST = 'ordered-list',\n  UL_LIST = 'unordered-list',\n  LIST_ITEM = 'list-item',\n\n  HR = 'hr',\n  QUOTE = 'blockquote',\n\n  EMBEDDED_ENTRY = 'embedded-entry-block',\n  EMBEDDED_ASSET = 'embedded-asset-block',\n  EMBEDDED_RESOURCE = 'embedded-resource-block',\n\n  TABLE = 'table',\n  TABLE_ROW = 'table-row',\n  TABLE_CELL = 'table-cell',\n  TABLE_HEADER_CELL = 'table-header-cell',\n}\n", "/**\n * Map of all Contentful inline types. Inline contain inline or text nodes.\n *\n * @note This should be kept in alphabetical order since the\n * [validation package](https://github.com/contentful/content-stack/tree/master/packages/validation)\n *  relies on the values being in a predictable order.\n */\nexport enum INLINES {\n  ASSET_HYPERLINK = 'asset-hyperlink',\n  EMBEDDED_ENTRY = 'embedded-entry-inline',\n  EMBEDDED_RESOURCE = 'embedded-resource-inline',\n  ENTRY_HYPERLINK = 'entry-hyperlink',\n  HYPERLINK = 'hyperlink',\n  RESOURCE_HYPERLINK = 'resource-hyperlink',\n}\n", "/**\n * Map of all Contentful marks.\n */\nexport enum MARKS {\n  BOLD = 'bold',\n  ITALIC = 'italic',\n  UNDERLINE = 'underline',\n  CODE = 'code',\n  SUPERSCRIPT = 'superscript',\n  SUBSCRIPT = 'subscript',\n  STRIKETHROUGH = 'strikethrough',\n}\n", "import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport { MARKS } from './marks';\n\nexport type TopLevelBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE\n  | BLOCKS.TABLE;\n\n/**\n * Array of all top level block types.\n * Only these block types can be the direct children of the document.\n */\nexport const TOP_LEVEL_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n  BLOCKS.TABLE,\n];\n\nexport type ListItemBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE;\n\n/**\n * Array of all allowed block types inside list items\n */\nexport const LIST_ITEM_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\nexport const TABLE_BLOCKS = [\n  BLOCKS.TABLE,\n  BLOCKS.TABLE_ROW,\n  BLOCKS.TABLE_CELL,\n  BLOCKS.TABLE_HEADER_CELL,\n];\n\n/**\n * Array of all void block types\n */\nexport const VOID_BLOCKS = [\n  BLOCKS.HR,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\n/**\n * Dictionary of all container block types, and the set block types they accept as children.\n *\n * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n */\nexport const CONTAINERS = {\n  [BLOCKS.OL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.UL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.LIST_ITEM]: LIST_ITEM_BLOCKS,\n  [BLOCKS.QUOTE]: [BLOCKS.PARAGRAPH],\n  [BLOCKS.TABLE]: [BLOCKS.TABLE_ROW],\n  [BLOCKS.TABLE_ROW]: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n  [BLOCKS.TABLE_CELL]: [BLOCKS.PARAGRAPH, BLOCKS.UL_LIST, BLOCKS.OL_LIST],\n  [BLOCKS.TABLE_HEADER_CELL]: [BLOCKS.PARAGRAPH],\n};\n\n/**\n * Array of all heading levels\n */\nexport const HEADINGS = [\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n];\n\n/**\n * Array of all block types that may contain text and inline nodes.\n */\nexport const TEXT_CONTAINERS = [BLOCKS.PARAGRAPH, ...HEADINGS];\n\n/**\n * Node types before `tables` release.\n */\nexport const V1_NODE_TYPES = [\n  BLOCKS.DOCUMENT,\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.LIST_ITEM,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  INLINES.HYPERLINK,\n  INLINES.ENTRY_HYPERLINK,\n  INLINES.ASSET_HYPERLINK,\n  INLINES.EMBEDDED_ENTRY,\n  'text',\n];\n\n/**\n * Marks before `superscript` & `subscript` release.\n */\nexport const V1_MARKS = [MARKS.BOLD, MARKS.CODE, MARKS.ITALIC, MARKS.UNDERLINE];\n", "import { BLOCKS } from './blocks';\nimport { Document } from './types';\n\n/**\n * A rich text document considered to be empty.\n * Any other document structure than this is not considered empty.\n */\nexport const EMPTY_DOCUMENT: Document = {\n  nodeType: BLOCKS.DOCUMENT,\n  data: {},\n  content: [\n    {\n      nodeType: BLOCKS.PARAGRAPH,\n      data: {},\n      content: [\n        {\n          nodeType: 'text',\n          value: '',\n          marks: [],\n          data: {},\n        },\n      ],\n    },\n  ],\n};\n", "import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport { Block, Inline, Node, Text } from './types';\n\n/**\n * Tiny replacement for Object.values(object).includes(key) to\n * avoid including CoreJS polyfills\n */\nfunction hasValue(obj: Record<string, unknown>, value: unknown) {\n  for (const key of Object.keys(obj)) {\n    if (value === obj[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Checks if the node is an instance of Inline.\n */\nexport function isInline(node: Node): node is Inline {\n  return hasValue(INLINES, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Block.\n */\nexport function isBlock(node: Node): node is Block {\n  return hasValue(BLOCKS, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Text.\n */\nexport function isText(node: Node): node is Text {\n  return node.nodeType === 'text';\n}\n", "import { ValidationError } from '.';\nimport type { Path } from './path';\n\nexport const typeMismatchError = ({\n  path,\n  property,\n  typeName,\n  value,\n}: {\n  path: Path;\n  property: string | number;\n  typeName: string;\n  value: any;\n}): ValidationError => {\n  return {\n    details: `The type of \"${property}\" is incorrect, expected type: ${typeName}`,\n    name: 'type',\n    path: path.toArray(),\n    type: typeName,\n    value,\n  };\n};\n\nexport const minSizeError = ({\n  min,\n  value,\n  path,\n}: {\n  min: number;\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    name: 'size',\n    min,\n    path: path.toArray(),\n    details: `Size must be at least ${min}`,\n    value,\n  };\n};\n\nexport const maxSizeError = ({\n  max,\n  value,\n  path,\n}: {\n  max: number;\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    name: 'size',\n    max,\n    path: path.toArray(),\n    details: `Size must be at most ${max}`,\n    value,\n  };\n};\n\nexport const enumError = ({\n  expected,\n  value,\n  path,\n}: {\n  expected: string[];\n  value: any;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `Value must be one of expected values`,\n    name: 'in',\n    expected: [...expected].sort(),\n    path: path.toArray(),\n    value,\n  };\n};\n\nexport const unknownPropertyError = ({\n  property,\n  path,\n}: {\n  property: string;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `The property \"${property}\" is not expected`,\n    name: 'unexpected',\n    path: path.toArray(),\n  };\n};\n\nexport const requiredPropertyError = ({\n  property,\n  path,\n}: {\n  property: string;\n  path: Path;\n}): ValidationError => {\n  return {\n    details: `The property \"${property}\" is required here`,\n    name: 'required',\n    path: path.toArray(),\n  };\n};\n", "import isPlainObject from 'is-plain-obj';\n\nimport { ValidationError } from '.';\nimport {\n  maxSizeError,\n  typeMismatchError,\n  enumError,\n  unknownPropertyError,\n  requiredPropertyError,\n  minSizeError,\n} from './errors';\nimport type { Path } from './path';\n\nexport class ObjectAssertion {\n  private _errors: ValidationError[] = [];\n\n  constructor(\n    private readonly obj: Record<string, any>,\n    private readonly path: Path,\n  ) {}\n\n  catch = (...errors: ValidationError[]): void => {\n    this._errors.push(...errors);\n  };\n\n  get errors(): ValidationError[] {\n    const serializeError = (error: ValidationError): string =>\n      JSON.stringify({\n        details: error.details,\n        path: error.path,\n      });\n\n    return this._errors.filter(\n      (error, index) =>\n        this._errors.findIndex((step) => serializeError(error) === serializeError(step)) === index,\n    );\n  }\n\n  /**\n   * Asserts the key exists in the object. You probably shouldn't call this\n   * function directly. Instead, use `$.object`, `$.number`, `$.string`, etc.\n   */\n  exists = (key: string): boolean => {\n    if (key in this.obj) {\n      return true;\n    }\n\n    this.catch(\n      requiredPropertyError({\n        property: key,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is a plain object. if\n   * no key is provided, it asserts the object itself.\n   */\n  public object = (key?: string): boolean => {\n    const value = key ? this.obj[key] : this.obj;\n\n    if (key) {\n      if (!this.exists(key)) {\n        return false;\n      }\n    }\n\n    if (isPlainObject(value)) {\n      return true;\n    }\n\n    const path = key ? this.path.of(key) : this.path;\n    const property = key ?? this.path.last() ?? 'value';\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'Object',\n        property,\n        path,\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is a string.\n   */\n  public string = (key: string): boolean => {\n    const value = this.obj[key];\n\n    if (key && !this.exists(key)) {\n      return false;\n    }\n\n    if (typeof value === 'string') {\n      return true;\n    }\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'String',\n        property: key,\n        path: this.path.of(key),\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is a number.\n   */\n  public number = (key: string, optional?: boolean): boolean => {\n    const value = this.obj[key];\n\n    if (optional && !(key in this.obj)) {\n      return true;\n    }\n\n    if (!this.exists(key)) {\n      return false;\n    }\n\n    if (typeof value === 'number' && !Number.isNaN(value)) {\n      return true;\n    }\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'Number',\n        property: key,\n        path: this.path.of(key),\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the key exists in the object and its value is an array. You don't\n   * need to manually call this function before `$.each` or `$.maxLength`.\n   */\n  public array = (key: string): boolean => {\n    const value = this.obj[key];\n\n    if (key && !this.exists(key)) {\n      return false;\n    }\n\n    if (Array.isArray(value)) {\n      return true;\n    }\n\n    this.catch(\n      typeMismatchError({\n        typeName: 'Array',\n        property: key,\n        path: this.path.of(key),\n        value,\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the value of the key is one of the expected values.\n   */\n  public enum = (key: string, expected: string[]): boolean => {\n    const value = this.obj[key];\n\n    if (typeof value === 'string' && expected.includes(value)) {\n      return true;\n    }\n\n    this.catch(\n      enumError({\n        expected,\n        value,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the array value of the object key is empty. If the value isn't an\n   * array, the function captures a type error and returns false.\n   */\n  public empty = (key: string): boolean => {\n    if (!this.array(key)) {\n      return false;\n    }\n\n    const value = this.obj[key] as Array<unknown>;\n\n    if (value.length === 0) {\n      return true;\n    }\n\n    this.catch(\n      maxSizeError({\n        max: 0,\n        value,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the length of the value of the object key is at least `min`. If the\n   * value isn't an array, the function captures a type error and returns false.\n   */\n  public minLength = (key: string, min: number): boolean => {\n    if (!this.array(key)) {\n      return false;\n    }\n\n    const value = this.obj[key] as Array<unknown>;\n\n    if (value.length >= min) {\n      return true;\n    }\n\n    this.catch(\n      minSizeError({\n        min,\n        value,\n        path: this.path.of(key),\n      }),\n    );\n\n    return false;\n  };\n\n  /**\n   * Asserts the object has no additional properties other than the ones\n   * specified\n   */\n  public noAdditionalProperties = (properties: string[]): boolean => {\n    const unknowns = Object.keys(this.obj)\n      .sort()\n      .filter((key) => !properties.includes(key));\n\n    unknowns.forEach((property) =>\n      this.catch(\n        unknownPropertyError({\n          property,\n          path: this.path.of(property),\n        }),\n      ),\n    );\n\n    return unknowns.length === 0;\n  };\n\n  /**\n   * Iterates over the value of the key and assert each item. If the value isn't\n   * an array, the function captures a type error and safely exits.\n   *\n   * To maintain compatibility with previous implementation, we stop early if we\n   * find any errors.\n   */\n  public each = (key: string, assert: (item: any, path: Path) => ValidationError[]): void => {\n    if (!this.array(key)) {\n      return;\n    }\n\n    const value = this.obj[key] as Array<any>;\n\n    let foundErrors = false;\n    value.forEach((item, index) => {\n      if (foundErrors) {\n        return;\n      }\n\n      const errors = assert(item, this.path.of(key).of(index));\n\n      if (errors.length > 0) {\n        foundErrors = true;\n      }\n\n      this.catch(...errors);\n    });\n  };\n}\n", "import { ValidationError } from '.';\nimport {\n  AssetHyperlink,\n  AssetLinkBlock,\n  EntryHyperlink,\n  EntryLinkBlock,\n  Hyperlink,\n  ResourceLinkBlock,\n  ResourceLinkInline,\n} from '../nodeTypes';\nimport { Block, Document, Inline } from '../types';\nimport { ObjectAssertion } from './assert';\nimport type { Path } from './path';\n\nexport type Node = Document | Block | Inline;\n\nexport type GetContentRule<T extends Node> =\n  | string[]\n  | ((\n      node: T,\n      path: Path,\n    ) => {\n      nodeTypes: string[];\n      min?: number;\n    });\n\nexport type ValidateData<T extends Node> = (data: T['data'], path: Path) => ValidationError[];\n\nexport const VOID_CONTENT: GetContentRule<Node> = [];\n\nexport class NodeAssertion<T extends Node = Node> {\n  constructor(\n    private contentRule: GetContentRule<T>,\n    private validateData?: ValidateData<T>,\n  ) {}\n\n  assert(node: T, path: Path): ValidationError[] {\n    const $ = new ObjectAssertion(node, path);\n\n    if (!$.object()) {\n      return $.errors;\n    }\n\n    $.noAdditionalProperties(['nodeType', 'data', 'content']);\n\n    const { nodeTypes, min = 0 } = Array.isArray(this.contentRule)\n      ? {\n          nodeTypes: this.contentRule,\n        }\n      : this.contentRule(node, path);\n\n    if (nodeTypes.length === 0 && min > 0) {\n      throw new Error(\n        `Invalid content rule. Cannot have enforce a 'min' of ${min} with no nodeTypes`,\n      );\n    }\n\n    $.minLength('content', min);\n\n    // Is void\n    if (nodeTypes.length === 0) {\n      $.empty('content');\n    }\n\n    // Ensure content nodes have valid nodeTypes without validating the full\n    // shape which is something that's only done later if the current node is\n    // valid.\n    else {\n      $.each('content', (item, path) => {\n        const item$ = new ObjectAssertion(item, path);\n\n        if (!item$.object()) {\n          return item$.errors;\n        }\n\n        item$.enum('nodeType', nodeTypes);\n\n        return item$.errors;\n      });\n    }\n\n    if ($.object('data')) {\n      const dataErrors = this.validateData?.(node.data, path.of('data')) ?? [];\n      $.catch(...dataErrors);\n    }\n\n    return $.errors;\n  }\n}\n\nexport class EntityLinkAssertion<\n  T extends\n    | EntryLinkBlock\n    | EntryHyperlink\n    | AssetLinkBlock\n    | AssetHyperlink\n    | ResourceLinkBlock\n    | ResourceLinkInline,\n> extends NodeAssertion<T> {\n  private type: 'ResourceLink' | 'Link';\n\n  constructor(\n    private linkType: 'Entry' | 'Asset' | 'Contentful:Entry',\n    contentNodeTypes: GetContentRule<T>,\n  ) {\n    super(contentNodeTypes, (data, path) => this.assertLink(data, path));\n    this.type = this.linkType.startsWith('Contentful:') ? 'ResourceLink' : 'Link';\n  }\n\n  private assertLink = (data: T['data'], path: Path): ValidationError[] => {\n    const $ = new ObjectAssertion(data, path);\n\n    if ($.object('target')) {\n      const sys$ = new ObjectAssertion(data.target.sys, path.of('target').of('sys'));\n\n      if (sys$.object()) {\n        sys$.enum('type', [this.type]);\n        sys$.enum('linkType', [this.linkType]);\n\n        if (this.type === 'Link') {\n          sys$.string('id');\n          sys$.noAdditionalProperties(['type', 'linkType', 'id']);\n        } else if (this.type === 'ResourceLink') {\n          sys$.string('urn');\n          sys$.noAdditionalProperties(['type', 'linkType', 'urn']);\n        }\n      }\n\n      $.catch(...sys$.errors);\n    }\n\n    $.noAdditionalProperties(['target']);\n\n    return $.errors;\n  };\n}\n\nexport class HyperLinkAssertion<T extends Hyperlink> extends NodeAssertion<T> {\n  constructor() {\n    super(['text'], (data, path) => this.assertLink(data, path));\n  }\n\n  private assertLink = (data: T['data'], path: Path): ValidationError[] => {\n    const $ = new ObjectAssertion(data, path);\n\n    $.string('uri');\n    $.noAdditionalProperties(['uri']);\n\n    return $.errors;\n  };\n}\n\nexport const assert = <T extends Node>(\n  contentRule: GetContentRule<T>,\n  validateData?: ValidateData<T>,\n): NodeAssertion<T> => {\n  return new NodeAssertion(contentRule, validateData);\n};\n\nexport const assertLink = <\n  T extends\n    | EntryLinkBlock\n    | EntryHyperlink\n    | AssetLinkBlock\n    | AssetHyperlink\n    | ResourceLinkBlock\n    | ResourceLinkInline,\n>(\n  linkType: 'Entry' | 'Asset' | 'Contentful:Entry',\n  contentRule: GetContentRule<T>,\n): EntityLinkAssertion<T> => {\n  return new EntityLinkAssertion(linkType, contentRule);\n};\n", "export class Path {\n  constructor(private readonly path: (string | number)[] = []) {}\n\n  of = (element: string | number): Path => {\n    return new Path([...this.path, element]);\n  };\n\n  isRoot = (): boolean => {\n    return this.path.length === 0;\n  };\n\n  last = (): string | number | undefined => {\n    return this.path[this.path.length - 1];\n  };\n\n  toArray = (): (string | number)[] => {\n    return this.path;\n  };\n}\n", "import { ValidationError } from '.';\nimport { Text } from '../types';\nimport { ObjectAssertion } from './assert';\nimport type { Path } from './path';\n\nexport function assertText(text: Text, path: Path): ValidationError[] {\n  const $ = new ObjectAssertion(text, path);\n\n  if (!$.object()) {\n    return $.errors;\n  }\n\n  $.noAdditionalProperties(['nodeType', 'data', 'value', 'marks']);\n\n  $.object('data');\n  $.each('marks', (mark, path) => {\n    const mark$ = new ObjectAssertion(mark, path);\n\n    if (!mark$.object()) {\n      return mark$.errors;\n    }\n\n    // For historical reasons, we don't explicitly check for supported marks\n    // e.g. bold, italic ..etc. This makes it possible for a customer to add\n    // custom marks\n    mark$.string('type');\n\n    return mark$.errors;\n  });\n\n  $.string('value');\n\n  return $.errors;\n}\n", "import { BLOCKS } from '../blocks';\nimport { INLINES } from '../inlines';\nimport { CONTAINERS, LIST_ITEM_BLOCKS, TOP_LEVEL_BLOCKS } from '../schemaConstraints';\nimport { Document, Text } from '../types';\nimport { ObjectAssertion } from './assert';\nimport { NodeAssertion, Node, HyperLinkAssertion, assert, assertLink, VOID_CONTENT } from './node';\nimport { Path } from './path';\nimport { assertText } from './text';\n\nexport type ValidationError = {\n  name: string;\n  type?: string;\n  value?: Record<string, any> | string | number | boolean | null;\n  min?: number | string;\n  max?: number | string;\n  details?: string | null;\n  path?: (string | number)[];\n  contentTypeId?: string | string[];\n  nodeType?: string;\n  customMessage?: string;\n  expected?: string[];\n};\n\nconst assertInlineOrText = assert([...Object.values(INLINES), 'text'].sort());\n\nconst assertList = assert([BLOCKS.LIST_ITEM]);\nconst assertVoidEntryLink = assertLink('Entry', VOID_CONTENT);\nconst assertTableCell = assert(\n  () => ({\n    nodeTypes: [BLOCKS.PARAGRAPH],\n    min: 1,\n  }),\n  (data, path) => {\n    const $ = new ObjectAssertion(data, path);\n\n    $.noAdditionalProperties(['colspan', 'rowspan']);\n    $.number('colspan', true);\n    $.number('rowspan', true);\n\n    return $.errors;\n  },\n);\n\nconst nodeValidator: Record<Node['nodeType'], NodeAssertion<any>> = {\n  [BLOCKS.DOCUMENT]: assert(TOP_LEVEL_BLOCKS),\n  [BLOCKS.PARAGRAPH]: assertInlineOrText,\n  [BLOCKS.HEADING_1]: assertInlineOrText,\n  [BLOCKS.HEADING_2]: assertInlineOrText,\n  [BLOCKS.HEADING_3]: assertInlineOrText,\n  [BLOCKS.HEADING_4]: assertInlineOrText,\n  [BLOCKS.HEADING_5]: assertInlineOrText,\n  [BLOCKS.HEADING_6]: assertInlineOrText,\n  [BLOCKS.QUOTE]: assert(CONTAINERS[BLOCKS.QUOTE]),\n  [BLOCKS.EMBEDDED_ENTRY]: assertVoidEntryLink,\n  [BLOCKS.EMBEDDED_ASSET]: assertLink('Asset', VOID_CONTENT),\n  [BLOCKS.EMBEDDED_RESOURCE]: assertLink('Contentful:Entry', VOID_CONTENT),\n  [BLOCKS.HR]: assert(VOID_CONTENT),\n  [BLOCKS.OL_LIST]: assertList,\n  [BLOCKS.UL_LIST]: assertList,\n  [BLOCKS.LIST_ITEM]: assert([...LIST_ITEM_BLOCKS].sort()),\n  [BLOCKS.TABLE]: assert(() => ({\n    nodeTypes: [BLOCKS.TABLE_ROW],\n    min: 1,\n  })),\n  [BLOCKS.TABLE_ROW]: assert(() => ({\n    nodeTypes: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n    min: 1,\n  })),\n  [BLOCKS.TABLE_CELL]: assertTableCell,\n  [BLOCKS.TABLE_HEADER_CELL]: assertTableCell,\n  [INLINES.HYPERLINK]: new HyperLinkAssertion(),\n  [INLINES.EMBEDDED_ENTRY]: assertVoidEntryLink,\n  [INLINES.EMBEDDED_RESOURCE]: assertLink('Contentful:Entry', VOID_CONTENT),\n  [INLINES.ENTRY_HYPERLINK]: assertLink('Entry', ['text']),\n  [INLINES.ASSET_HYPERLINK]: assertLink('Asset', ['text']),\n  [INLINES.RESOURCE_HYPERLINK]: assertLink('Contentful:Entry', ['text']),\n};\n\nfunction validateNode(node: Node | Text, path: Path): ValidationError[] {\n  if (node.nodeType === 'text') {\n    return assertText(node, path);\n  }\n\n  const errors = nodeValidator[node.nodeType].assert(node, path);\n\n  if (errors.length > 0) {\n    return errors;\n  }\n\n  const $ = new ObjectAssertion(node, path);\n\n  $.each('content', (item, path) => {\n    // We already know those are valid nodes thanks to the assertion done in\n    // the NodeAssertion class\n    return validateNode(item, path);\n  });\n\n  return $.errors;\n}\n\nexport const validateRichTextDocument = (document: Document): ValidationError[] => {\n  const path = new Path();\n  const $ = new ObjectAssertion(document, path);\n\n  if ($.object()) {\n    $.enum('nodeType', [BLOCKS.DOCUMENT]);\n  }\n\n  if ($.errors.length > 0) {\n    return $.errors;\n  }\n\n  return validateNode(document, path);\n};\n"],
  "mappings": "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",
  "names": ["BLOCKS", "INLINES", "MARKS", "_a", "ObjectAssertion", "path", "assert", "NodeAssertion", "EntityLinkAssertion", "HyperLinkAssertion", "Path"]
}
