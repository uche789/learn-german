{
  "version": 3,
  "sources": ["../../@contentful/rich-text-react-renderer/src/util/appendKeyToValidElement.ts", "../../@contentful/rich-text-react-renderer/src/util/nodeListToReactComponents.tsx", "../../@contentful/rich-text-react-renderer/src/index.tsx"],
  "sourcesContent": ["import { cloneElement, isValidElement, ReactNode } from 'react';\n\nexport function appendKeyToValidElement(element: ReactNode, key: number): ReactNode {\n  if (isValidElement(element) && element.key === null) {\n    return cloneElement(element, { key });\n  }\n  return element;\n}\n", "import React, { ReactNode } from 'react';\n\nimport { helpers, Mark } from '@contentful/rich-text-types';\n\nimport { CommonNode, Options } from '..';\n\nimport { appendKeyToValidElement } from './appendKeyToValidElement';\n\nexport function nodeListToReactComponents(nodes: CommonNode[], options: Options): ReactNode {\n  return nodes.map((node: CommonNode, index: number): ReactNode => {\n    return appendKeyToValidElement(nodeToReactComponent(node, options), index);\n  });\n}\n\nexport function nodeToReactComponent(node: CommonNode, options: Options): ReactNode {\n  const { renderNode, renderMark, renderText, preserveWhitespace } = options;\n\n  if (helpers.isText(node)) {\n    let nodeValue: ReactNode = renderText ? renderText(node.value) : node.value;\n\n    // Preserving whitespace is only supported with the default transformations.\n    if (preserveWhitespace && !renderText) {\n      // Preserve multiple spaces.\n      nodeValue = (nodeValue as string).replace(/ {2,}/g, (match) => '\\u00A0'.repeat(match.length));\n\n      // Preserve line breaks.\n      const lines = (nodeValue as string).split('\\n');\n      const jsxLines: (string | JSX.Element)[] = [];\n\n      lines.forEach((line, index) => {\n        jsxLines.push(line);\n        if (index !== lines.length - 1) {\n          jsxLines.push(<br />);\n        }\n      });\n      nodeValue = jsxLines;\n    }\n\n    return node.marks.reduce((value: ReactNode, mark: Mark): ReactNode => {\n      if (!renderMark[mark.type]) {\n        return value;\n      }\n      return renderMark[mark.type](value);\n    }, nodeValue);\n  } else {\n    const children: ReactNode = nodeListToReactComponents(node.content, options);\n    if (!node.nodeType || !renderNode[node.nodeType]) {\n      return <>{children}</>;\n    }\n    return renderNode[node.nodeType](node, children);\n  }\n}\n", "import React, { ReactNode } from 'react';\n\nimport { Block, BLOCKS, Document, Inline, INLINES, MARKS, Text } from '@contentful/rich-text-types';\n\nimport { nodeToReactComponent } from './util/nodeListToReactComponents';\n\nconst defaultNodeRenderers: RenderNode = {\n  [BLOCKS.DOCUMENT]: (node, children) => children,\n  [BLOCKS.PARAGRAPH]: (node, children) => <p>{children}</p>,\n  [BLOCKS.HEADING_1]: (node, children) => <h1>{children}</h1>,\n  [BLOCKS.HEADING_2]: (node, children) => <h2>{children}</h2>,\n  [BLOCKS.HEADING_3]: (node, children) => <h3>{children}</h3>,\n  [BLOCKS.HEADING_4]: (node, children) => <h4>{children}</h4>,\n  [BLOCKS.HEADING_5]: (node, children) => <h5>{children}</h5>,\n  [BLOCKS.HEADING_6]: (node, children) => <h6>{children}</h6>,\n  [BLOCKS.EMBEDDED_ENTRY]: (node, children) => <div>{children}</div>,\n  [BLOCKS.EMBEDDED_RESOURCE]: (node, children) => <div>{children}</div>,\n  [BLOCKS.UL_LIST]: (node, children) => <ul>{children}</ul>,\n  [BLOCKS.OL_LIST]: (node, children) => <ol>{children}</ol>,\n  [BLOCKS.LIST_ITEM]: (node, children) => <li>{children}</li>,\n  [BLOCKS.QUOTE]: (node, children) => <blockquote>{children}</blockquote>,\n  [BLOCKS.HR]: () => <hr />,\n  [BLOCKS.TABLE]: (node, children) => (\n    <table>\n      <tbody>{children}</tbody>\n    </table>\n  ),\n  [BLOCKS.TABLE_ROW]: (node, children) => <tr>{children}</tr>,\n  [BLOCKS.TABLE_HEADER_CELL]: (node, children) => <th>{children}</th>,\n  [BLOCKS.TABLE_CELL]: (node, children) => <td>{children}</td>,\n  [INLINES.ASSET_HYPERLINK]: (node) => defaultInline(INLINES.ASSET_HYPERLINK, node as Inline),\n  [INLINES.ENTRY_HYPERLINK]: (node) => defaultInline(INLINES.ENTRY_HYPERLINK, node as Inline),\n  [INLINES.RESOURCE_HYPERLINK]: (node) =>\n    defaultInlineResource(INLINES.RESOURCE_HYPERLINK, node as Inline),\n  [INLINES.EMBEDDED_ENTRY]: (node) => defaultInline(INLINES.EMBEDDED_ENTRY, node as Inline),\n  [INLINES.EMBEDDED_RESOURCE]: (node, _children) =>\n    defaultInlineResource(INLINES.EMBEDDED_RESOURCE, node as Inline),\n  [INLINES.HYPERLINK]: (node, children) => <a href={node.data.uri}>{children}</a>,\n};\n\nconst defaultMarkRenderers: RenderMark = {\n  [MARKS.BOLD]: (text) => <b>{text}</b>,\n  [MARKS.ITALIC]: (text) => <i>{text}</i>,\n  [MARKS.UNDERLINE]: (text) => <u>{text}</u>,\n  [MARKS.CODE]: (text) => <code>{text}</code>,\n  [MARKS.SUPERSCRIPT]: (text) => <sup>{text}</sup>,\n  [MARKS.SUBSCRIPT]: (text) => <sub>{text}</sub>,\n  [MARKS.STRIKETHROUGH]: (text) => <s>{text}</s>,\n};\n\nfunction defaultInline(type: string, node: Inline): ReactNode {\n  return (\n    <span key={node.data.target.sys.id}>\n      type: {node.nodeType} id: {node.data.target.sys.id}\n    </span>\n  );\n}\n\nfunction defaultInlineResource(type: string, node: Inline) {\n  return (\n    <span key={node.data.target.sys.urn}>\n      type: {node.nodeType} urn: {node.data.target.sys.urn}\n    </span>\n  );\n}\n\nexport type CommonNode = Text | Block | Inline;\n\nexport interface NodeRenderer {\n  (node: Block | Inline, children: ReactNode): ReactNode;\n}\n\nexport interface RenderNode {\n  [k: string]: NodeRenderer;\n}\n\nexport interface RenderMark {\n  [k: string]: (text: ReactNode) => ReactNode;\n}\n\nexport interface RenderText {\n  (text: string): ReactNode;\n}\n\nexport interface Options {\n  /**\n   * Node renderers\n   */\n  renderNode?: RenderNode;\n  /**\n   * Mark renderers\n   */\n  renderMark?: RenderMark;\n  /**\n   * Text renderer\n   */\n  renderText?: RenderText;\n  /**\n   * Keep line breaks and multiple spaces\n   */\n  preserveWhitespace?: boolean;\n}\n\n/**\n * Serialize a Contentful Rich Text `document` to React tree\n */\nexport function documentToReactComponents(\n  richTextDocument: Document,\n  options: Options = {},\n): ReactNode {\n  if (!richTextDocument) {\n    return null;\n  }\n\n  return nodeToReactComponent(richTextDocument, {\n    renderNode: {\n      ...defaultNodeRenderers,\n      ...options.renderNode,\n    },\n    renderMark: {\n      ...defaultMarkRenderers,\n      ...options.renderMark,\n    },\n    renderText: options.renderText,\n    preserveWhitespace: options.preserveWhitespace,\n  });\n}\n"],
  "mappings": "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",
  "names": ["isValidElement", "cloneElement", "helpers", "BLOCKS", "INLINES", "MARKS"]
}
